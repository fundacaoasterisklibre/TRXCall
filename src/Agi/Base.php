<?php
/**
 * Created by IntelliJ IDEA.
 * User: vmuniz
 * Date: 15/06/17
 * Time: 18:58
 */

namespace App\Agi;

use App\Entity\Forward;
use App\Entity\License;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Doctrine\ORM\EntityManager;
use App\Agi\Base\AGICustom;

abstract class Base extends ContainerAwareCommand
{
    /**
     * @var AGICustom
     */
    protected $agi;

    /**
     * @var EntityManager
     */
    public $em;

    /**
     * @var OutputInterface
     */
    protected $output;

    /**
     * @var InputInterface
     */
    protected $input;

    public function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this->addArgument('action', InputArgument::REQUIRED, 'Açao a ser executada.');

        set_error_handler([$this, 'error']);
    }

    public function execute(InputInterface $input, OutputInterface $output)
    {

        $this->output = $output;

        $this->input = $input;

        //INICIA AS VARIAVEIS DE AMBIENTE
        $this->init();

        try {
            $this->pre();

            $action = $this->input->getArgument('action');

            if (!method_exists($this, $action)) {
                throw new \Exception("Método {$$action} não encontrado");
            }

            $this->{$action}();

        } catch (\Exception $ex) {

            $this->agi->set_variable('ERROR_MESSAGE', $ex->getMessage());

            $this->error($ex->getMessage());
        }

    }

    private function init()
    {
        $_ENV['PATH'] = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/X11R6/bin:/usr/local/apache/bin';
        $this->agi = new AGICustom($this->output);

        $this->em = $this->getContainer()->get('doctrine.orm.default_entity_manager');
    }

    abstract protected function pre();

    public function error($msg)
    {
//        $this->agi->verbose($msg);
    }

    protected function setGoto($context, $priority = 'INIT', $exten = 's')
    {
        $this->agi->exec('SET', 'GOTO_CONTEXT=' . $context);
        $this->agi->exec('SET', 'GOTO_PRIORITY=' . $priority);
        $this->agi->exec('SET', 'GOTO_EXTEN=' . $exten);
    }

    protected function checkGoto(Forward $forward)
    {
        if ($forward === null) {
            return false;
        }

        switch ($forward->getClassname()) {
            case 'App\Entity\Ivr':
                $this->setGoto('ivr-exten', 1, $forward->getReference());
                return true;
            case 'App\Entity\Branch':
                $this->setGoto('branch', 1, $forward->getReference());
                return true;
            case 'App\Entity\Realtime\Queue':
                $this->setGoto('queue', 1, $forward->getReference());
                return true;
        }

        return false;
    }

}
