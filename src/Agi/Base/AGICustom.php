<?php
/**
 * Created by IntelliJ IDEA.
 * User: vmuniz
 * Date: 15/06/17
 * Time: 18:58
 */
 namespace App\Agi\Base;

 use Symfony\Component\Console\Output\OutputInterface;

 class AGICustom extends AGI {
     /**
      * @var OutputInterface
      */
     private $output;
 
     /**
      * P2BAgi constructor.
      */
     public function __construct(OutputInterface $output) {
 
         $this->output = $output;
         parent::__construct();
         restore_error_handler();
     }
 
     /**
      * @param string $string
      *
      * @return array
      */
     public function noop($message = "") {
         $this->log($message . ' [NOOP]');
 
         return $this->exec('noop', $message);
     }
 
     public function log($message = null, $retry = true) {
         error_log($message);
         if (defined('FAKE')) {
             $this->output->writeln($message);
         }
         $this->verbose($message);
         //error_log($message);
     }
 
     public function getAsteriskVar($var) {
         if (!isset($var) && !is_array($var)) {
             return false;
         }
 
         $error = 0;
         do {
             if ($error > 2) {
                 return false;
             }
 
             $data = $this->get_variable($var);
 
             if (strlen($data['data']) == 0) {
                 $error++;
                 continue;
             }
 
             if ($data == 'Invalid or unknown command') {
                 return false;
             }
 
             return $data['data'];
         } while (true);
     }
 
     public function unsetAsteriskVar($var) {
         if (!isset($var) && !is_array($var)) {
             return;
         }
 
         do {
             $this->set_variable($var, null);
             $aux = $this->get_variable($var);
             if (!is_array($aux)) {
                 continue;
             }
             $data = trim($aux['data']);
             if (empty($data)) {
                 return;
             }
         } while (true);
     }
 
     public function read($compare = false, $extra = []) {
         $defaultExtra = ['try'    => 3,
                          'length' => '',
                          'audio'  => ['read'      => 'vm-password',
                                       'incorrect' => 'vm-invalid-password',
                                       'tryAgain'  => 'vm-invalidpassword'
                          ],
                          'check'  => function ($digit) use ($compare) {
                              if ($compare === false) {
                                  return true;
                              }
 
                              return $digit === $compare;
                          }
         ];
 
         $extra = array_merge($defaultExtra, $extra);
         $extra['audio'] = array_merge($defaultExtra['audio'], $extra['audio']);
         $extra['length'] = $compare ? strlen($compare) : $extra['length'];
 
         $error = 0;
 
         $audioRead = $extra['audio']['read'];
 
         do {
             error_log('-> ' . var_export($extra, true), 3, '/var/log/asterisk/php_error.log');
             $this->exec('Read', 'BUFFER,' . $audioRead . ',' . $extra['length'] . ',,5');
 
             $buffer = $this->getAsteriskVar('BUFFER');
             $this->unsetAsteriskVar('BUFFER');
 
             $ret = $extra['check']($buffer);
 
             if ($ret) {
                 return is_bool($ret) ? $buffer : $ret;
             }
 
             $error++;
 
             if ($error >= $extra['try']) {
                 if ($extra['audio']['tryAgain'] !== false) {
                     $this->exec('BackGround', $extra['audio']['tryAgain'] . ',n');
                 }
 
                 return null;
             }
 
             $audioRead = $extra['audio']['incorrect'];
         } while (true);
     }
 
     public function exec_dial($identifier, $timeout = null, $options = null, $url = null, $teste = null) {
         list($type, $identifier) = explode('/', $identifier, 2);
 
         return parent::exec_dial($type, $identifier, $timeout, $options, $url); // TODO: Change the autogenerated stub
     }
 
     function exec($application, $options) {
         return parent::exec($application, $options); // TODO: Change the autogenerated stub
     }
 }